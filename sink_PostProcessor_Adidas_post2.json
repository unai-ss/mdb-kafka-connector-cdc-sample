{
    "name":"MongoDBAtlasSinkConnectorConfigAdidasPost",
    "config":{
      "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
      "transforms.TimestampConverter.target.type": "Timestamp",
      "errors.log.include.messages": "true",
      "mongo.errors.log.enable": "true",
      "writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.InsertOneDefaultStrategy",
      "transforms.TimestampConverter.field": "orderDate",
      "tasks.max": "1",
      "transforms": "RenameField,TimestampConverter",
      "errors.deadletterqueue.context.headers.enable": "true",
      "max.num.retries": "3",
      "mongo.errors.tolerance": "all",
      "database": "omnihuborders-uat",
      "document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInValueStrategy",
      "transforms.RenameField.type": "org.apache.kafka.connect.transforms.ReplaceField$Value",
      "value.converter": "org.apache.kafka.connect.json.JsonConverter",
      "errors.log.enable": "true",
      "key.converter": "org.apache.kafka.connect.storage.StringConverter",
      "transforms.RenameField.renames": "orderNumber:_id",
      "topics": "event.order_export_internalx8",
      "transforms.TimestampConverter.type": "org.apache.kafka.connect.transforms.TimestampConverter$Value",
      "collection": "order2",
      "transforms.TimestampConverter.format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
      "bulk.write.ordered": "false",
      "errors.deadletterqueue.topic.name": "omnihuborders.omnihub.master.order_data_adidas.deadletterqueue8",
      "value.converter.schemas.enable": "false",
      "errors.tolerance": "all",
      "post.processor.chain": "com.mongodb.kafka.connect.sink.processor.KafkaMetaAdder,com.mongodb.kafka.connect.sink.processor.DocumentIdAdder",
      "connection.uri": "mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=replset"
    }
 }

//X  connector.class: com.mongodb.kafka.connect.MongoSinkConnector
//X transforms.TimestampConverter.target.type: Timestamp
//X errors.log.include.messages: true
//X mongo.errors.log.enable: true
//X writemodel.strategy: com.mongodb.kafka.connect.sink.writemodel.strategy.InsertOneDefaultStrategy
//X transforms.TimestampConverter.field: orderDate
//X tasks.max: 25
//X transforms: RenameField,TimestampConverter 
//X errors.deadletterqueue.context.headers.enable: true
//X mongo.errors.tolerance: all
//X database: omnihuborders-uat
//X document.id.strategy: com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInValueStrategy
//X transforms.RenameField.type: org.apache.kafka.connect.transforms.ReplaceField$Value
//X value.converter: org.apache.kafka.connect.json.JsonConverter
//X errors.log.enable: true
//X key.converter: org.apache.kafka.connect.storage.StringConverter
//X transforms.RenameField.renames: orderNumber:_id
//X topics: omnihuborders.order_service.event.order_export_internal_uat
//X transforms.TimestampConverter.type: org.apache.kafka.connect.transforms.TimestampConverter$Value
//X collection: order
//X transforms.TimestampConverter.format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
//X bulk.write.ordered: false
//X errors.deadletterqueue.topic.name: omnihuborders.omnihub.master.order_data_adidas.deadletterqueue_uat
//X connection.uri: mongodb+srv://mongoDBdevuser:1Y4b4JZK4emPzui9@mongodbatlas-dev.7vnmg.mongodb.net/?retryWrites=true&w=majority
//X value.converter.schemas.enable: false
//X name: MongoDBAtlasSinkConnectorConfigUat
//X errors.tolerance: all
//X post.processor.chain: com.mongodb.kafka.connect.sink.processor.KafkaMetaAdder,com.mongodb.kafka.connect.sink.processor.DocumentIdAdder
 // {"_id":7,"name":"John Doe","age":22,"hobbies":{"indoor":["Chess"],"outdoor":["BasketballStand-up Comedy"]}}
 // [appuser@kafka-connect ~]$ cat /tmp/adidas_text_orig_oneline.json | kafka-console-producer --topic event.order_export_internalx8 --bootstrap-server=kafka2:19092,kafka3:19093,kafka1:19091